resource "newrelic_alert_policy" "kubernetes_alert_policy" {
  name = "Kubernetes Alert Policy"
  incident_preference = "PER_CONDITION_AND_TARGET"
}

resource "newrelic_nrql_alert_condition" "container_cpu_throttling_is_high" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Container cpu throttling is high"

  description = <<-EOT
  Alert when container is being throttled > 25% of the time for more than 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sContainerSample select sum(containerCpuCfsThrottledPeriodsDelta) / sum(containerCpuCfsPeriodsDelta) * 100 where clusterName in ('YOUR_CLUSTER_NAME') and namespaceName in ('YOUR_NAMESPACE_NAME') facet containerName, podName, namespaceName, clusterName"
  }

  critical {
    operator = "above"
    threshold = 90
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 300
  aggregation_method = "event_flow"
  aggregation_delay = 60
  slide_by = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "container_high_cpu_utilization" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Container high cpu utilization"

  description = <<-EOT
  Alert when the average container cpu utilization (vs. Limit) is > 90% for more than 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sContainerSample select average(cpuCoresUtilization) where clusterName in ('YOUR_CLUSTER_NAME') and namespaceName in ('YOUR_NAMESPACE_NAME') facet containerName, podName, namespaceName, clusterName"
  }

  critical {
    operator = "above"
    threshold = 90
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 300
  aggregation_method = "event_flow"
  aggregation_delay = 60
  slide_by = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "container_high_memory_utilization" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Container high memory utilization"

  description = <<-EOT
  Alert when the average container memory utilization (vs. Limit) is > 90% for more than 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sContainerSample select average(memoryWorkingSetUtilization) where clusterName in ('YOUR_CLUSTER_NAME') and namespaceName in ('YOUR_NAMESPACE_NAME') facet containerName, podName, namespaceName, clusterName"
  }

  critical {
    operator = "above"
    threshold = 90
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 300
  aggregation_method = "event_flow"
  aggregation_delay = 60
  slide_by = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "container_is_restarting" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Container is Restarting"

  description = <<-EOT
  Alert when the container restart count is greater than 0 in a sliding 5 minute window
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sContainerSample select sum(restartCountDelta) where clusterName in ('YOUR_CLUSTER_NAME') and namespaceName in ('YOUR_NAMESPACE_NAME') FACET containerName, podName, namespaceName, clusterName"
  }

  critical {
    operator = "above"
    threshold = 0
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 300
  aggregation_method = "event_flow"
  aggregation_delay = 60
  slide_by = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "container_is_waiting" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Container is Waiting"

  description = <<-EOT
  Alert when a container is Waiting for more than 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sContainerSample select uniqueCount(podName) WHERE status = 'Waiting' and clusterName in ('YOUR_CLUSTER_NAME') and namespaceName in ('YOUR_NAMESPACE_NAME') FACET containerName, podName, namespaceName, clusterName"
  }

  critical {
    operator = "above"
    threshold = 0
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "daemonset_is_missing_pods" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Daemonset is missing Pods"

  description = <<-EOT
  Alert when Daemonset is missing Pods for > 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sDaemonsetSample select latest(podsMissing) where clusterName in ('YOUR_CLUSTER_NAME') and namespaceName in ('YOUR_NAMESPACE_NAME') facet daemonsetName, namespaceName, clusterName"
  }

  critical {
    operator = "above"
    threshold = 0
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "deployment_is_missing_pods" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Deployment is missing Pods"

  description = <<-EOT
  Alert when Deployment is missing Pods for > 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sDeploymentSample select latest(podsMissing) where clusterName in ('YOUR_CLUSTER_NAME') and namespaceName in ('YOUR_NAMESPACE_NAME') facet deploymentName, namespaceName, clusterName"
  }

  critical {
    operator = "above"
    threshold = 0
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "etcd_file_descriptor_utilization_is_high" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Etcd file descriptor utilization is high"

  description = <<-EOT
  Alert when Etcd file descriptor utilization is > 90% for more than 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sEtcdSample select max(processFdsUtilization) where clusterName in ('YOUR_CLUSTER_NAME') facet displayName, clusterName"
  }

  critical {
    operator = "below"
    threshold = 1
    threshold_duration = 60
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "etcd_has_no_leader" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Etcd has no leader"

  description = <<-EOT
  Alert when Etcd has no leader for more than 1 minute
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sEtcdSample select min(etcdServerHasLeader) where clusterName in ('YOUR_CLUSTER_NAME') facet displayName, clusterName"
  }

  critical {
    operator = "below"
    threshold = 1
    threshold_duration = 60
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "hpa_current_replicas_desired_replicas" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "HPA current replicas < desired replicas"

  description = <<-EOT
  Alert when a Horizontal Pod Autoscaler's current replicas < desired replicas for > 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "FROM K8sHpaSample select latest(desiredReplicas - currentReplicas) where clusterName in ('YOUR_CLUSTER_NAME') and namespaceName in ('YOUR_NAMESPACE_NAME') facet displayName, namespaceName, clusterName"
  }

  warning {
    operator = "equals"
    threshold = 0
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "hpa_has_reached_maximum_replicas" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "HPA has reached maximum replicas"

  description = <<-EOT
  Alert when a Horizontal Pod Autoscaler has reached its maximum replicas for > 5
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "FROM K8sHpaSample select latest(maxReplicas - currentReplicas) where clusterName in ('YOUR_CLUSTER_NAME') and namespaceName in ('YOUR_NAMESPACE_NAME') facet displayName, namespaceName, clusterName"
  }

  warning {
    operator = "equals"
    threshold = 0
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "job_failed" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Job Failed"

  description = <<-EOT
  Alert when a Job reports a failed status
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sJobSample select uniqueCount(jobName) where failed = 'true' and clusterName in ('YOUR_CLUSTER_NAME') and namespaceName in ('YOUR_NAMESPACE_NAME') facet jobName, namespaceName, clusterName, failedPodsReason"
  }

  warning {
    operator = "above"
    threshold = 0
    threshold_duration = 60
    threshold_occurrences = "at_least_once"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "more_than_5_pods_failing_in_namespace" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "More than 5 pods failing in namespace"

  description = <<-EOT
  AAlert when more than 5 pods are failing in a namespace for more than 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sPodSample select uniqueCount(podName) where clusterName in ('YOUR_CLUSTER_NAME') and namespaceName in ('YOUR_NAMESPACE_NAME') and status = 'Failed' facet namespaceName, clusterName"
  }

  critical {
    operator = "above"
    threshold = 0
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "node_allocatable_cpu_utilization_is_high" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Node allocatable cpu utilization is high"

  description = <<-EOT
  Alert when the average Node allocatable cpu utilization is > 90% for more than 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sNodeSample select average(allocatableCpuCoresUtilization) where clusterName in ('YOUR_CLUSTER_NAME') facet nodeName, clusterName"
  }

  critical {
    operator = "above"
    threshold = 90
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 300
  aggregation_method = "event_flow"
  aggregation_delay = 60
  slide_by = 60
  expiration_duration = 900
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "node_allocatable_memory_utilization_is_high" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Node allocatable memory utilization is high"

  description = <<-EOT
  Alert when the average Node allocatable memory utilization is > 90% for more than 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sNodeSample select average(allocatableMemoryUtilization) where clusterName in ('YOUR_CLUSTER_NAME') facet nodeName, clusterName"
  }

  critical {
    operator = "above"
    threshold = 90
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 300
  aggregation_method = "event_flow"
  aggregation_delay = 60
  slide_by = 60
  expiration_duration = 900
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "node_is_not_ready" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Node is not ready"

  description = <<-EOT
  Alert when a Node is not ready for > 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sNodeSample select latest(condition.Ready) where clusterName in ('YOUR_CLUSTER_NAME') facet nodeName, clusterName"
  }

  critical {
    operator = "below"
    threshold = 1
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "node_is_unschedulable" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Node is unschedulable"

  description = <<-EOT
  Alert when Node has been marked as unschedulable
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sNodeSample select latest(unschedulable) where clusterName in ('YOUR_CLUSTER_NAME') facet nodeName, clusterName"
  }

  warning {
    operator = "above"
    threshold = 0
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 900
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "node_pod_count_nearing_capacity" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Node Pod count nearing capacity"

  description = <<-EOT
  Alert when the Running pod count on a Node is > 90% of the Node's Pod Capacity for more than 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "FROM K8sPodSample, K8sNodeSample select ceil(filter(uniqueCount(podName), where status = 'Running') / latest(capacityPods) * 100) as 'Pod Capacity %' where nodeName != '' and nodeName is not null and clusterName in ('YOUR_CLUSTER_NAME') facet nodeName, clusterName"
  }

  warning {
    operator = "above"
    threshold = 90
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "node_root_file_system_capacity_utilization_is_high" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Node root file system capacity utilization is high"

  description = <<-EOT
  Alert when the average Node root file system capacity utilization is > 90% for more than 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sNodeSample select average(fsCapacityUtilization) where clusterName in ('YOUR_CLUSTER_NAME') facet nodeName, clusterName"
  }

  critical {
    operator = "above"
    threshold = 90
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 300
  aggregation_method = "event_flow"
  aggregation_delay = 60
  slide_by = 60
  expiration_duration = 900
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "persistent_volume_has_errors" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Persistent Volume has errors"

  description = <<-EOT
  Alert when Persistent Volume is in a Failed or Pending state for more than 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sPersistentVolumeSample select uniqueCount(volumeName) where statusPhase in ('Failed','Pending') and clusterName in ('YOUR_CLUSTER_NAME') facet volumeName, clusterName"
  }

  critical {
    operator = "above"
    threshold = 0
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "pod_cannot_be_scheduled" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Pod cannot be scheduled"

  description = <<-EOT
  Alert when a Pod cannot be scheduled for more than 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sPodSample select latest(isScheduled) where clusterName in ('YOUR_CLUSTER_NAME') and namespaceName in ('YOUR_NAMESPACE_NAME') facet podName, namespaceName, clusterName"
  }

  critical {
    operator = "below"
    threshold = 1
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "pod_is_not_ready" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Pod is not ready"

  description = <<-EOT
  Alert when a Pod is not ready for > 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "FROM K8sPodSample select latest(isReady) where status not in ('Failed', 'Succeeded') where clusterName in ('YOUR_CLUSTER_NAME') and namespaceName in ('YOUR_NAMESPACE_NAME') facet podName, namespaceName, clusterName"
  }

  critical {
    operator = "below"
    threshold = 1
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}

resource "newrelic_nrql_alert_condition" "statefulset_is_missing_pods" {
  account_id = var.new_relic_account_id
  policy_id = newrelic_alert_policy.kubernetes_alert_policy.id
  type = "static"
  name = "Statefulset is missing Pods"

  description = <<-EOT
  Alert when Statefulset is missing Pods for > 5 minutes
  EOT

  enabled = false
  violation_time_limit_seconds = 21600

  nrql {
    query = "from K8sStatefulsetSample select latest(podsMissing) where clusterName in ('YOUR_CLUSTER_NAME') and namespaceName in ('YOUR_NAMESPACE_NAME') facet daemonsetName, namespaceName, clusterName"
  }

  critical {
    operator = "above"
    threshold = 0
    threshold_duration = 300
    threshold_occurrences = "all"
  }
  fill_option = "none"
  aggregation_window = 60
  aggregation_method = "event_flow"
  aggregation_delay = 60
  expiration_duration = 300
  open_violation_on_expiration = false
  close_violations_on_expiration = true
}
